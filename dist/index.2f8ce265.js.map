{"mappings":"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","sources":["sound.js"],"sourcesContent":["// https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode\n\nconst width = 1500;\nconst height = 1500;\nconst canvas = document.querySelector('canvas');\nconst ctx = canvas.getContext('2d');\ncanvas.width = width;\ncanvas.height = height;\nlet analyzer;\nlet bufferLength;\n\nfunction handleError(err) {\n  console.log('You must give access to your mic in order to proceed');\n}\n\nasync function getAudio() {\n  const stream = await navigator.mediaDevices\n    .getUserMedia({ audio: true })\n    .catch(handleError);\n  const audioCtx = new AudioContext();\n  analyzer = audioCtx.createAnalyser();\n  const source = audioCtx.createMediaStreamSource(stream);\n  source.connect(analyzer);\n  // Amount of data to be collected\n  // https://developer.mozilla.org/en-US/docs/Web/API/AnalyserNode/fftSize\n  analyzer.fftSize = 2 ** 8;\n  // Collect data from audio input\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Uint8Array\n  bufferLength = analyzer.frequencyBinCount; // How many pieces of data\n  const timeData = new Uint8Array(bufferLength);\n  const frequencyData = new Uint8Array(bufferLength);\n  drawTimeData(timeData);\n  drawFrequency(frequencyData);\n}\n\nfunction drawTimeData(timeData) {\n  // Inject time data into timData array\n  analyzer.getByteTimeDomainData(timeData);\n  console.log(timeData);\n  // Visualize\n  ctx.clearRect(0, 0, width, height);\n  ctx.lineWidth = 10;\n  ctx.strokeStyle = '#ffc600';\n  ctx.beginPath();\n  const sliceWidth = width / bufferLength;\n  console.log(sliceWidth);\n  let x = 0;\n  timeData.forEach((data, i) => {\n    const v = data / 128;\n    const y = (v * height) / 2;\n    // Draw the lines\n    if (i === 0) {\n      ctx.moveTo(x, y);\n    } else {\n      ctx.lineTo(x, y);\n    }\n    x += sliceWidth;\n  });\n\n  ctx.stroke();\n\n  // Call itself as soon as possible\n  requestAnimationFrame(() => drawTimeData(timeData));\n}\n\nfunction hslToRgb(h, s, l) {\n  let r;\n  let g;\n  let b;\n\n  if (s == 0) {\n    r = g = b = l; // achromatic\n  } else {\n    const hue2rgb = function hue2rgb(p, q, t) {\n      if (t < 0) t += 1;\n      if (t > 1) t -= 1;\n      if (t < 1 / 6) return p + (q - p) * 6 * t;\n      if (t < 1 / 2) return q;\n      if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n      return p;\n    };\n\n    const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n    const p = 2 * l - q;\n    r = hue2rgb(p, q, h + 1 / 3);\n    g = hue2rgb(p, q, h);\n    b = hue2rgb(p, q, h - 1 / 3);\n  }\n\n  return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\n}\n\nfunction drawFrequency(frequencyData) {\n  // Get the freq data into the freq array\n  analyzer.getByteFrequencyData(frequencyData);\n  // Figure out the bar width\n  const barWidth = (width / bufferLength) * 2.5;\n  let x = 0;\n  frequencyData.forEach((amount) => {\n    // 0 to 255\n    const percent = amount / 255;\n    const barHeight = height * percent * 1.2;\n    // Convert color to HSL\n    // https://mothereffinghsl.com/\n    const [h, s, l] = [360 / (percent * 360), 0.5, 0.5];\n    const [r, g, b] = hslToRgb(h, s, l);\n    ctx.fillStyle = `rgb(${r}, ${g}, ${b})`;\n\n    ctx.fillRect(x, height - barHeight, barWidth, barHeight);\n    x += barWidth + 1;\n  });\n\n  requestAnimationFrame(() => drawFrequency(frequencyData));\n}\n\ngetAudio();\n"],"names":[],"version":3,"file":"index.2f8ce265.js.map","sourceRoot":"/__parcel_source_root/"}